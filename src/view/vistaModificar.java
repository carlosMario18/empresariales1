/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.ControladorCitas;
import controller.ControladorConsultorios;
import interfaz.Observable;
import interfaz.Observador;
import model.CitaMedica;

import javax.swing.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;

/**
 * @author alejandrosanmiguel
 */
public class vistaModificar extends JFrame implements Observable {

    private ControladorCitas controlador;
    private static ControladorConsultorios controladorConsultorios;
    private CitaMedica citaModificar;
    private String tipoCita;
    private vistaListaPacientes listaPacientesFrame;
    private ArrayList<Observador> observadores;

    /**
     * Creates new form vistaHistorial
     */


    public vistaModificar() {
        observadores = new ArrayList<>();
    }

    public vistaModificar(ControladorCitas controlador, CitaMedica citaModificar, String tipoCita, vistaListaPacientes listaPacientesFrame) {
        this.controlador = controlador;
        this.citaModificar = citaModificar;
        this.tipoCita = tipoCita;
        this.listaPacientesFrame = listaPacientesFrame;
        this.observadores = new ArrayList<>();
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        textNombre.setText(citaModificar.getNombrePaciente());
        jDateChooser1.setDate(Date.from(citaModificar.getFecha().atStartOfDay(ZoneId.systemDefault()).toInstant()));
        boxTipoCita.setSelectedItem(citaModificar.getTipoCita());
        txtCosto.setText(String.valueOf(citaModificar.getCosto()));
    }

    @Override
    public void agregarObservador(Observador observador) {
        observadores.add(observador);
    }

    @Override
    public void eliminarObservador(Observador observador) {
        observadores.remove(observador);
    }

    @Override
    public void notificar() {
        for (Observador observador : observadores) {
            observador.update();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipalVistaModificar = new JPanel();
        panelCabeza = new JPanel();
        logo = new JLabel();
        jLabel1 = new JLabel();
        panelCuerpo = new JPanel();
        jLabel3 = new JLabel();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        jLabel4 = new JLabel();
        textNombre = new JTextArea();
        boxTipoCita = new JComboBox<>();
        btnGuardar = new JButton();
        txtCosto = new JTextArea();
        btnCancelar = new JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        panelCabeza.setBackground(new java.awt.Color(248, 245, 230));

        logo.setIcon(new ImageIcon(getClass().getResource("/view/img/iconPersona.jpeg"))); // NOI18N

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Liberation Sans", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Modificar datos ");

        GroupLayout panelCabezaLayout = new GroupLayout(panelCabeza);
        panelCabeza.setLayout(panelCabezaLayout);
        panelCabezaLayout.setHorizontalGroup(
                panelCabezaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panelCabezaLayout.createSequentialGroup()
                                .addContainerGap(88, Short.MAX_VALUE)
                                .addComponent(logo, GroupLayout.PREFERRED_SIZE, 95, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addGap(77, 77, 77))
        );
        panelCabezaLayout.setVerticalGroup(
                panelCabezaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panelCabezaLayout.createSequentialGroup()
                                .addGroup(panelCabezaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(panelCabezaLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(logo, GroupLayout.PREFERRED_SIZE, 95, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(panelCabezaLayout.createSequentialGroup()
                                                .addGap(35, 35, 35)
                                                .addComponent(jLabel1)))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelCuerpo.setBackground(new java.awt.Color(255, 255, 255));
        panelCuerpo.setBorder(BorderFactory.createTitledBorder(null, "Datos del paciente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Liberation Sans", 0, 18), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel3.setText("Nombre: ");

        jLabel5.setText("Tipo de cita:");

        jLabel6.setText("Costo:");

        jLabel4.setText("Fecha: ");

        textNombre.setColumns(20);
        textNombre.setRows(5);

        boxTipoCita.setModel(new DefaultComboBoxModel<>(new String[]{"Medico General", "Medico Especialista"}));
        boxTipoCita.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxTipoCitaItemStateChanged(evt);
            }
        });
        boxTipoCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxTipoCitaActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        txtCosto.setColumns(20);
        txtCosto.setRows(5);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        GroupLayout panelCuerpoLayout = new GroupLayout(panelCuerpo);
        panelCuerpo.setLayout(panelCuerpoLayout);
        panelCuerpoLayout.setHorizontalGroup(
                panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panelCuerpoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(panelCuerpoLayout.createSequentialGroup()
                                                .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 180, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                                                .addComponent(textNombre, GroupLayout.PREFERRED_SIZE, 256, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(GroupLayout.Alignment.TRAILING, panelCuerpoLayout.createSequentialGroup()
                                                .addGroup(panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel4)
                                                        .addComponent(jLabel5))
                                                .addGroup(panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(panelCuerpoLayout.createSequentialGroup()
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(boxTipoCita, GroupLayout.PREFERRED_SIZE, 158, GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(panelCuerpoLayout.createSequentialGroup()
                                                                .addGap(165, 165, 165)
                                                                .addComponent(jDateChooser1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addGap(98, 98, 98))
                                        .addGroup(GroupLayout.Alignment.TRAILING, panelCuerpoLayout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(panelCuerpoLayout.createSequentialGroup()
                                                                .addComponent(btnGuardar)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(btnCancelar))
                                                        .addComponent(txtCosto, GroupLayout.PREFERRED_SIZE, 256, GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap())
        );
        panelCuerpoLayout.setVerticalGroup(
                panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panelCuerpoLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(textNombre, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4)
                                        .addComponent(jDateChooser1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(25, 25, 25)
                                .addGroup(panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(boxTipoCita, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5))
                                .addGap(25, 25, 25)
                                .addGroup(panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(txtCosto, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addGroup(panelCuerpoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnGuardar)
                                        .addComponent(btnCancelar))
                                .addContainerGap(22, Short.MAX_VALUE))
        );

        GroupLayout panelPrincipalVistaModificarLayout = new GroupLayout(panelPrincipalVistaModificar);
        panelPrincipalVistaModificar.setLayout(panelPrincipalVistaModificarLayout);
        panelPrincipalVistaModificarLayout.setHorizontalGroup(
                panelPrincipalVistaModificarLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(panelCuerpo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelCabeza, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelPrincipalVistaModificarLayout.setVerticalGroup(
                panelPrincipalVistaModificarLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panelPrincipalVistaModificarLayout.createSequentialGroup()
                                .addComponent(panelCabeza, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelCuerpo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(panelPrincipalVistaModificar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(panelPrincipalVistaModificar, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void boxTipoCitaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxTipoCitaItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_boxTipoCitaItemStateChanged

    private void boxTipoCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxTipoCitaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxTipoCitaActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {
        String nuevoNombre = textNombre.getText();
        Date fechaSeleccionada = jDateChooser1.getDate();
        String nuevoTipoCita = (String) boxTipoCita.getSelectedItem();
        String nuevoCosto = txtCosto.getText();

        if (nuevoNombre.isEmpty() || fechaSeleccionada == null || nuevoTipoCita.isEmpty() || nuevoCosto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Error: Todos los campos son obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double costo;
        try {
            costo = Double.parseDouble(nuevoCosto);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: El costo debe ser un número entero válido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        LocalDate fecha;
        try {
            fecha = jDateChooser1.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: Formato de fecha inválido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        notificar();

        citaModificar.setNombrePaciente(nuevoNombre);
        citaModificar.setFecha(fecha);
        citaModificar.setTipoCita(nuevoTipoCita);
        citaModificar.setCosto(costo);
        controlador.modificarCita(citaModificar);

        listaPacientesFrame.actualizarTablaCitas();

        dispose();
    }

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {
        textNombre.setText("");
        jDateChooser1.setDate(null); // Limpiar la fecha seleccionada en el JDateChooser
        boxTipoCita.setSelectedIndex(0); // Establecer el primer elemento seleccionado en el JComboBox
        txtCosto.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vistaModificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vistaModificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vistaModificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vistaModificar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ControladorCitas controlador = new ControladorCitas();
                CitaMedica citaModificar = new CitaMedica() {
                    @Override
                    public double calcularCosto() {
                        return 0;
                    }

                    @Override
                    public boolean idExistente(String numeroIdentificacion) {
                        return false;
                    }
                };
                String tipoCita = ""; // Define el tipo de cita adecuado
                vistaListaPacientes listaPacientesFrame = new vistaListaPacientes(controlador, controladorConsultorios);
                vistaModificar vistaModificar = new vistaModificar(controlador, citaModificar, tipoCita, listaPacientesFrame);
                vistaModificar.setVisible(true);

                listaPacientesFrame.agregarObservadorModificar(vistaModificar);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JComboBox<String> boxTipoCita;
    private JButton btnCancelar;
    private JButton btnGuardar;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private JLabel jLabel1;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel logo;
    private JPanel panelCabeza;
    private JPanel panelCuerpo;
    private JPanel panelPrincipalVistaModificar;
    private JTextArea textNombre;
    private JTextArea txtCosto;
    // End of variables declaration//GEN-END:variables
}
